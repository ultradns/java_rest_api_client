import java.text.DateFormat
import java.text.SimpleDateFormat

/**
 * Copyright 2012-2013 NeuStar, Inc. All rights reserved.
 * NeuStar, the Neustar logo and related names and logos are registered
 * trademarks, service marks or tradenames of NeuStar, Inc. All other
 * product names, company names, marks, logos and symbols may be trademarks
 * of their respective owners.
 */


task createWrapper(type: Wrapper) {
  description = "Create a gradle wrapper for you project"
  gradleVersion = '4.10.1'
}

tasks.withType(GroovyCompile) {
  configure(groovyOptions.forkOptions) {
    memoryMaximumSize = '1g'
    jvmArgs = ['-XX:MaxMetaspaceSize=512m', '-Xms512m', '-Xmx1g'] //For Java8
  }
}

defaultTasks ''


task gitBuildId {
  description = "Determine the build id from git"
  def buildIdOut = new ByteArrayOutputStream()
  def errorsOut = new ByteArrayOutputStream()
  def extraInfo = ""
  try {
    exec {
      // TODO: use a java git library?
      standardOutput = buildIdOut
      errorOutput = errorsOut
      commandLine 'git', 'log', '-1', '--pretty=format:%h', 'HEAD'
    }
  } catch (Exception e) {
    buildIdOut.write('0'.getBytes())
    if (errorsOut.toString().contains("Not a git repository")) {
      extraInfo = "(Not a git repository and/or no commits found)\n" +
              "Type: git init; git add *; git commit *;"
    }
  }
  DateFormat df = new SimpleDateFormat("yyyyMMddHHmmss")
  df.setTimeZone(TimeZone.getTimeZone("GMT"))

  def date = new Date()
  def dateString = df.format(date)
  def buildId = "${dateString}.${buildIdOut.toString()}"
  println "buildId = ${buildId} ${extraInfo}"
  ext.output = {
    return buildId
  }
}

def buildId = rootProject.tasks.gitBuildId.output()


allprojects {
  apply plugin: 'java'
  apply plugin: 'signing'


  // IDE support
  apply from: rootProject.file('gradle/ide.gradle')
  
  // code checks
  apply from: rootProject.file('gradle/codechecks.gradle')


  if (version == 'unspecified') {
    version = '0.0.0'

    def envVersion = System.env['VERSION']
    if (envVersion) {
      version = envVersion
    }
  }
  
  version += '-' + buildId


  repositories {
    mavenCentral()
  }


  configurations {
    optional // added optional scope
  }
  

  // optional dependencies
  sourceSets.main.compileClasspath += configurations.optional
  idea {
    module{
      scopes.PROVIDED.plus += configurations.optional
    }
  }

  eclipse {
    classpath {
      plusConfigurations += configurations.optional
    }
  }

  group = 'com.ultradns'
  def vendor = 'Neustar, Inc.'

  jar.doFirst {
    manifest {
        // (project.version != "unspecified" ? project.version : rootProject.version)  - Should we do this?
        
        attributes 'Implementation-Title': "${project.name}",
                   'Implementation-Version': "${project.version}",
                   'Implementation-Vendor': "${vendor}",
                   provider: 'gradle'
    }
  }
}

task showRepos {
  doLast {
    description = "List the current repositories"
    println "Repositories: "
    println repositories.collect { it.name }
  }
}

// compile target for java, should narrow this to just java type projects..
task compile {
  dependsOn compileJava, compileTestJava
}

