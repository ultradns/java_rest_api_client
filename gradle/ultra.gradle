import java.text.DateFormat
import java.text.SimpleDateFormat

/**
 * Copyright 2012-2013 NeuStar, Inc. All rights reserved.
 * NeuStar, the Neustar logo and related names and logos are registered
 * trademarks, service marks or tradenames of NeuStar, Inc. All other
 * product names, company names, marks, logos and symbols may be trademarks
 * of their respective owners.
 */


task createWrapper(type: Wrapper) {
  description = "Create a gradle wrapper for you project"
  gradleVersion = '4.10.1'
}

tasks.withType(GroovyCompile) {
  configure(groovyOptions.forkOptions) {
    memoryMaximumSize = '1g'
    jvmArgs = ['-XX:MaxMetaspaceSize=512m', '-Xms512m', '-Xmx1g'] //For Java8
  }
}

defaultTasks ''


task gitBuildId {
  description = "Determine the build id from git"
  def buildIdOut = new ByteArrayOutputStream()
  def errorsOut = new ByteArrayOutputStream()
  def extraInfo = ""
  try {
    exec {
      // TODO: use a java git library?
      standardOutput = buildIdOut
      errorOutput = errorsOut
      commandLine 'git', 'log', '-1', '--pretty=format:%h', 'HEAD'
    }
  } catch (Exception e) {
    buildIdOut.write('0'.getBytes())
    if (errorsOut.toString().contains("Not a git repository")) {
      extraInfo = "(Not a git repository and/or no commits found)\n" +
              "Type: git init; git add *; git commit *;"
    }
  }
  DateFormat df = new SimpleDateFormat("yyyyMMddHHmmss")
  df.setTimeZone(TimeZone.getTimeZone("GMT"))

  def date = new Date()
  def dateString = df.format(date)
  def buildId = "${dateString}.${buildIdOut.toString()}"
  println "buildId = ${buildId} ${extraInfo}"
  ext.output = {
    return buildId
  }
}

def buildId = rootProject.tasks.gitBuildId.output()


// load properties for neustar ldap user & passwd
task loadNeustarCredentials {
  doFirst {
    description = "Load neustar credentials from the neustar.properties file"
    def credsFileName = "${project.gradle.gradleUserHomeDir}/neustar.properties"

    if (!(rootProject.hasProperty('ldapUsername') && rootProject.hasProperty('ldapPassword')) && !loadProperties(credsFileName)) {
      def errorHeader = """\
Missing Credentials for Artifact Repository
-------------------------------------------"""
      if (!rootProject.hasProperty('ldapUsername') && !rootProject.hasProperty('ldapPassword')) {
        def exampleContents = """\
Example File Contents:
    ldapUsername = yourldapname
    ldapPassword = yourldappassword
    """
        throw new GradleException("""\
${errorHeader}
Cannot find: ${credsFileName} or command line: -PldapUsername=\"your_ldap_name\" -PldapPassword=\"your_ldap_password\"
Properties file not found.\nPlease create '${credsFileName}' file with appropriate credentials set
""" + exampleContents)
      } else {
        throw new GradleException("""\
${errorHeader}
Specify both username & password by command line: -PldapUsername=\"your_ldap_name\" -PldapPassword=\"your_ldap_password\"
""")
      }
    }
  }
}


allprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'signing'

  
  // update runtime classpath to include conf dir BEFORE applying application to make this easy
  def conf_dir = project.file("conf")
  sourceSets.all {
    if (conf_dir.isDirectory()) {
      it.runtimeClasspath = it.runtimeClasspath + files('conf') + fileTree(dir: 'conf')
    }
  }

  dependencies {
    if (conf_dir.isDirectory()) {
      runtime files('conf')
    }
  }
  
  apply plugin: 'application'
  
  // IDE support
  apply from: rootProject.file('gradle/ide.gradle')
  
  // code checks
  apply from: rootProject.file('gradle/codechecks.gradle')

  def projectNameNoService = project.name.replace("-service","")
  
  // default for running a service app 
  def conf_file = project.file(["conf", projectNameNoService.toLowerCase() + '.yml'].join(File.separator))
  run.args = ["server", conf_file]

  // best guess ..
  project.ext.mainPackageName = projectNameNoService.toLowerCase()
  project.ext.mainServiceName = projectNameNoService.capitalize()
  project.ext.serviceClassName = "com.ultradns." + ext.mainPackageName + '.' + ext.mainServiceName + "Service"

  // If you want to specify a version, do so before applying this otherwise 
  // one will be picked from either environment variable 'VERSION' or default to '0.0.0'
  // The version will then be appended with a build id that corresponds to the git revision commit timestamp
  // The resulting version will be of the form: 0.0.0-buildNumber
  
  if (version == 'unspecified') {
    version = '0.0.0'

    def envVersion = System.env['VERSION']
    if (envVersion) {
      version = envVersion
    }
  }
  
  version += '-' + buildId

  def repoBaseUrl = "https://repo.nexgen.neustar.biz/nexus"
  rootProject.ext.repoBaseUrl = repoBaseUrl

  repositories {
    mavenCentral()
  }

  // Upload to maven repo ( Nexus )
  uploadArchives {
    doFirst {
      repositories.mavenDeployer {
        repository(url: repoBaseUrl + "/content/repositories/releases/") {
          authentication(userName: rootProject.ldapUsername, password: rootProject.ldapPassword)
        }
      }
    }
  }


  configurations {
    service
    optional // added optional scope
  }
  

  task uploadDistZip(type: Upload, dependsOn: distZip) {
    doFirst {
      configuration = configurations.service
      repositories.mavenDeployer {
        configuration = configurations.service
        repository(url: repoBaseUrl + "/content/repositories/services/") {
          authentication(userName: rootProject.ldapUsername, password: rootProject.ldapPassword)
        }
      }
    }
  }

  uploadArchives.dependsOn loadNeustarCredentials;
  uploadDistZip.dependsOn loadNeustarCredentials;

  task uploadService(dependsOn: uploadDistZip)

  artifacts { // define the artifacts for a service
    service distZip
  }

  // optional dependencies
  sourceSets.main.compileClasspath += configurations.optional
  idea {
    module{
      scopes.PROVIDED.plus += configurations.optional
    }
  }

  eclipse {
    classpath {
      plusConfigurations += configurations.optional
    }
  }

  group = 'com.ultradns'
  def vendor = 'Neustar, Inc.'

  jar.doFirst {
    manifest {
        // (project.version != "unspecified" ? project.version : rootProject.version)  - Should we do this?
        
        attributes 'Implementation-Title': "${project.name}",
                   'Implementation-Version': "${project.version}",
                   'Implementation-Vendor': "${vendor}",
                   provider: 'gradle'
    }
  }
  
  // application support
  //////////////////////
  
  distZip.doFirst {
    delete {
      fileTree(dir:"src/dist/conf")
      fileTree(dir:"src/dist/bin")
    }
    // copy in the conf dir
    copy {
      from file("conf")
      into file("src/dist/conf")
      includeEmptyDirs = true
    }
    copy {
      from('bin') {
        include '**/*'
      }
      into file("src/dist/bin")
      fileMode = 0755
    }
  }
  
  // update start scripts
  startScripts{
    doLast{
      copy {
        from('bin') {
          include '**/*'
        }
        into outputDir
      }
      
      // setup the heap dump path
      unixScript.text = unixScript.text.replace('\nCLASSPATH=', '\nCLASSPATH=$APP_HOME/conf:')
      windowsScript.text = windowsScript.text.replace('set CLASSPATH=', 'set CLASSPATH=%APP_HOME%\\conf;')
//      unixScript.text = unixScript.text.replace('\nCLASSPATH=', '\n. $APP_HOME/bin/proj_opts.sh\n\nCLASSPATH=')
//      windowsScript.text = windowsScript.text.replace('%DEFAULT_JVM_OPTS% ', '%DEFAULT_JVM_OPTS% -XX:HeapDumpPath="%APP_HOME%\\log" ')
    }
  }
}

task showRepos {
  doLast {
    description = "List the current repositories"
    println "Repositories: "
    println repositories.collect { it.name }
  }
}

// compile target for java, should narrow this to just java type projects..
task compile {
  dependsOn compileJava, compileTestJava
}

// Update Checking ...
buildscript {
   repositories {
       mavenCentral()
   }
   dependencies {
       classpath group: 'org.codehaus.groovy.modules.http-builder', name: 'http-builder', version: '0.5.1'
   }
}

// Utility method
/////////////////
def loadProperties(String sourceFileName) {
    def config = new Properties()
    def propFile = new File(sourceFileName)
    if (propFile.canRead()) {
        config.load(new FileInputStream(propFile))
        for (Map.Entry property in config) {
            ext[property.key] = property.value;
        }
        return true
    }
    return false
}


